{"version":3,"file":"315.1f21b342.iframe.bundle.js","mappings":";AAaA;AACA;;;;;;;;;;;;AAkBA;;;AAKA;;;;AAnBA;ACoCA;AACA;;AAoDA;;;;AAKA;;;;AAMA;;;AAIA;;;;;;;AAWA;;AAGA;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAGA","sources":["webpack://@stylospectrum/ui/./src/icon/index.ts","webpack://@stylospectrum/ui/./src/input/index.ts"],"sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html, css, unsafeCSS } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport { styleMap } from 'lit/directives/style-map.js';\nimport styles from './style/index.scss';\nimport { getIconData } from './util';\nlet Icon = class Icon extends LitElement {\n    static { this.styles = css `\n    ${unsafeCSS(styles)}\n  `; }\n    render() {\n        const iconData = getIconData(this.name);\n        if (!iconData) {\n            return html ``;\n        }\n        return html `\n      <i>\n        <svg\n          viewBox=\"0 0 512 512\"\n          width=\"1em\"\n          height=\"1em\"\n          role=\"presentation\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          fill=\"currentColor\"\n          stroke=\"currentColor\"\n          part=\"root\"\n          aria-hidden=\"true\"\n          style=${styleMap({\n            transform: `rotate(${this.rotate}deg)`,\n        })}\n        >\n          <g role=\"presentation\">\n            <path d=\"${iconData.pathData}\" />\n          </g>\n        </svg>\n      </i>\n    `;\n    }\n};\n__decorate([\n    property({ type: String })\n], Icon.prototype, \"name\", void 0);\n__decorate([\n    property({ type: Number })\n], Icon.prototype, \"rotate\", void 0);\nIcon = __decorate([\n    customElement('stylospectrum-icon')\n], Icon);\nexport default Icon;\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html, css, unsafeCSS, nothing, } from 'lit';\nimport { customElement, property, query, state } from 'lit/decorators.js';\nimport { InputType, ValueState } from '../types';\nimport { event } from '../utils';\nimport { isEnter, isEscape } from '../utils/Keys';\nimport styles from './style/index.scss';\nimport '../icon';\nimport '../icon/data/decline';\nimport '../icon/data/error';\nimport '../icon/data/search';\nlet Input = class Input extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Defines a short hint intended to aid the user with data entry when the\n         * component has no value.\n         *\n         * @type {string}\n         * @defaultValue \"\"\n         * @public\n         */\n        this.placeholder = '';\n        /**\n         * Defines the value state of the component.\n         *\n         * @type {ValueState}\n         * @defaultValue \"None\"\n         * @public\n         */\n        this.valueState = ValueState.None;\n        /**\n         * Defines the HTML type of the component.\n         *\n         * @type {InputType}\n         * @defaultValue \"Text\"\n         * @public\n         */\n        this.type = InputType.Text;\n        /**\n         * Defines the inner stored value of the component.\n         *\n         * @type {string}\n         * @defaultValue \"\"\n         * @private\n         */\n        this._innerValue = '';\n    }\n    static { this.styles = css `\n    ${unsafeCSS(styles)}\n  `; }\n    _handleClear() {\n        this._innerValue = '';\n        this._showClearIcon = false;\n        this.changeEvent.emit(this._innerValue);\n        this.input?.focus();\n    }\n    _handleSearchIconClick() {\n        this.focused = true;\n        this.input.focus();\n    }\n    _handleInput(e) {\n        const value = e.target.value;\n        if (!this.value) {\n            this._innerValue = value;\n        }\n        this._showClearIcon = this.allowClear && !!value && !this.disabled;\n        this.changeEvent.emit(value);\n    }\n    _handleFocus() {\n        this.focused = true;\n    }\n    _handleBlur() {\n        this.focused = false;\n    }\n    _handleKeyDown(e) {\n        if (isEnter(e)) {\n            this.enterEvent.emit(this._innerValue);\n        }\n        if (isEscape(e)) {\n            this.escapeEvent.emit();\n        }\n    }\n    getFocusDomRef() {\n        return this.input;\n    }\n    willUpdate(_changedProperties) {\n        super.willUpdate(_changedProperties);\n        if (_changedProperties.has('value')) {\n            this._innerValue = this.value || '';\n        }\n        if (_changedProperties.has('allowClear') ||\n            _changedProperties.has('value') ||\n            _changedProperties.has('disabled')) {\n            this._showClearIcon =\n                this.allowClear && !!this._innerValue && !this.disabled;\n        }\n    }\n    render() {\n        const clearIconNode = this._showClearIcon\n            ? html `<span\n          class=\"stylospectrum-input-icon-wrapper\"\n          @click=${this._handleClear}\n        >\n          <stylospectrum-icon class=\"stylospectrum-input-icon\" name=\"decline\">\n          </stylospectrum-icon>\n        </span>`\n            : nothing;\n        const searchIconNode = this.showSearch\n            ? html `<span class=\"stylospectrum-input-icon-wrapper\">\n          <stylospectrum-icon\n            class=\"stylospectrum-input-icon\"\n            name=\"search\"\n            @click=${this._handleSearchIconClick}\n          >\n          </stylospectrum-icon>\n        </span>`\n            : nothing;\n        const valueStateMessageNode = this.valueStateMessage &&\n            this.valueState === ValueState.Error &&\n            this.focused\n            ? html ` <div class=\"stylospectrum-input-value-state-message-wrapper\">\n            <stylospectrum-icon\n              class=\"stylospectrum-input-value-state-message-icon\"\n              name=\"error\"\n            >\n            </stylospectrum-icon>\n            <span class=\"stylospectrum-input-value-state-message\">\n              ${this.valueStateMessage}\n            </span>\n          </div>`\n            : nothing;\n        return html `\n      <span class=\"stylospectrum-input-wrapper\">\n        <input\n          .value=${this._innerValue || this.defaultValue || ''}\n          @focus=${this._handleFocus}\n          @blur=${this._handleBlur}\n          @input=${this._handleInput}\n          @keydown=${this._handleKeyDown}\n          type=${this.type.toLowerCase()}\n          .placeholder=${this.placeholder}\n          class=\"stylospectrum-input\"\n          ?disabled=${this.disabled}\n        />\n        ${clearIconNode} ${valueStateMessageNode} ${searchIconNode}\n      </span>\n    `;\n    }\n};\n__decorate([\n    property({ type: Boolean })\n], Input.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: String })\n], Input.prototype, \"placeholder\", void 0);\n__decorate([\n    property({ type: String })\n], Input.prototype, \"value\", void 0);\n__decorate([\n    property({ type: String })\n], Input.prototype, \"defaultValue\", void 0);\n__decorate([\n    property({ type: String, attribute: 'value-state', reflect: true })\n], Input.prototype, \"valueState\", void 0);\n__decorate([\n    property({ type: String, attribute: 'value-state-message' })\n], Input.prototype, \"valueStateMessage\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'allow-clear' })\n], Input.prototype, \"allowClear\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'show-search' })\n], Input.prototype, \"showSearch\", void 0);\n__decorate([\n    property({ type: String })\n], Input.prototype, \"type\", void 0);\n__decorate([\n    state()\n], Input.prototype, \"_showClearIcon\", void 0);\n__decorate([\n    state()\n], Input.prototype, \"_innerValue\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], Input.prototype, \"focused\", void 0);\n__decorate([\n    event({ name: 'change' })\n], Input.prototype, \"changeEvent\", void 0);\n__decorate([\n    event({ name: 'enter' })\n], Input.prototype, \"enterEvent\", void 0);\n__decorate([\n    event({ name: 'escape' })\n], Input.prototype, \"escapeEvent\", void 0);\n__decorate([\n    query('input')\n], Input.prototype, \"input\", void 0);\nInput = __decorate([\n    customElement('stylospectrum-input')\n], Input);\nexport default Input;\n"],"names":[],"sourceRoot":""}