{"version":3,"file":"checkbox-stories.69102505.iframe.bundle.js","mappings":";;AA4BA;AACA;;;;AA4CA;AAGA;AAEA;;;;;AAMA;AACA;AACA;;;AAGA;;AAEA;;AAEA;AACA;;;;;;AAMA;;AAGA;;ACjGA;AACA;AACA;AACA;AACA;;;AAUA;ACPA;AACA;;;;;;;;;;;;AAkBA;;;AAKA;;;;AAnBA;ACNA;AACA;;;;;;AAuBA","sources":["webpack://@stylospectrum/ui/./src/checkbox/index.ts","webpack://@stylospectrum/ui/./src/checkbox/stories.ts","webpack://@stylospectrum/ui/./src/icon/index.ts","webpack://@stylospectrum/ui/./src/tooltip/index.ts"],"sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html, css, unsafeCSS, nothing } from 'lit';\nimport { customElement, property, query, state } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport styles from './style/index.scss';\nimport { event } from '../utils';\nimport { isEnter, isSpace } from '../utils/Keys';\nimport '../icon';\nimport '../tooltip';\nimport '../icon/data/accept';\nlet Checkbox = class Checkbox extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Defines the inner stored value of the component.\n         *\n         * @type {string}\n         * @defaultValue \"\"\n         * @private\n         */\n        this._innerChecked = false;\n    }\n    static { this.styles = css `\n    ${unsafeCSS(styles)}\n  `; }\n    get effectiveTabIndex() {\n        const tabindex = this.getAttribute('tabindex');\n        return this.disabled ? undefined : tabindex || '0';\n    }\n    _handleKeyDown(e) {\n        if (isSpace(e)) {\n            e.preventDefault();\n        }\n        if (isEnter(e)) {\n            this.toggle(true);\n        }\n    }\n    _handleKeyUp(e) {\n        if (isSpace(e)) {\n            this.toggle(true);\n        }\n    }\n    toggle(_key = false) {\n        if (_key) {\n            this.inputEle.checked = !this.inputEle.checked;\n        }\n        const checked = this.inputEle.checked;\n        if (this.disabled || this.indeterminate) {\n            return;\n        }\n        if (!this.checked) {\n            this._innerChecked = checked;\n        }\n        this.changeEvent.emit(checked);\n    }\n    willUpdate(_changedProperties) {\n        super.willUpdate(_changedProperties);\n        if (_changedProperties.has('checked') && !this.indeterminate) {\n            this._innerChecked = this.checked;\n        }\n    }\n    render() {\n        const checkNode = this._innerChecked && !this.indeterminate\n            ? html `<stylospectrum-icon\n            class=\"stylospectrum-checkbox-icon\"\n            name=\"accept\"\n          >\n          </stylospectrum-icon>`\n            : nothing;\n        const textNode = this.text\n            ? html `<stylospectrum-label class=\"stylospectrum-checkbox-label\">\n          ${this.text}\n        </stylospectrum-label>`\n            : nothing;\n        return html `\n      <label\n        class=\"stylospectrum-checkbox-wrapper\"\n        role=\"checkbox\"\n        part=\"root\"\n        tabindex=\"${ifDefined(this.effectiveTabIndex)}\"\n        @keydown=\"${this._handleKeyDown}\"\n        @keyup=\"${this._handleKeyUp}\"\n      >\n        <span class=\"stylospectrum-checkbox-inner\">\n          ${checkNode}\n          <input\n            @input=${() => this.toggle()}\n            type=\"checkbox\"\n            ?checked=\"${this._innerChecked}\"\n            ?disabled=\"${this.disabled}\"\n            tabindex=\"-1\"\n            aria-hidden=\"true\"\n          />\n        </span>\n\n        ${textNode}\n      </label>\n    `;\n    }\n};\n__decorate([\n    property({ type: Boolean })\n], Checkbox.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: Boolean })\n], Checkbox.prototype, \"indeterminate\", void 0);\n__decorate([\n    property({ type: Boolean })\n], Checkbox.prototype, \"checked\", void 0);\n__decorate([\n    property()\n], Checkbox.prototype, \"text\", void 0);\n__decorate([\n    state()\n], Checkbox.prototype, \"_innerChecked\", void 0);\n__decorate([\n    event({ name: 'change' })\n], Checkbox.prototype, \"changeEvent\", void 0);\n__decorate([\n    query('input')\n], Checkbox.prototype, \"inputEle\", void 0);\nCheckbox = __decorate([\n    customElement('stylospectrum-checkbox')\n], Checkbox);\nexport default Checkbox;\n","import { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport '.';\nconst Template = (args) => {\n    return html `\n    <stylospectrum-checkbox\n      @change=\"${(e) => console.log('change:', e.detail)}\"\n      text=${ifDefined(args.text || undefined)}\n      ?checked=${args.checked}\n      ?indeterminate=${args.indeterminate}\n      ?disabled=${args.disabled}\n    >\n    </stylospectrum-checkbox>\n  `;\n};\nexport default {\n    title: 'Checkbox',\n    component: 'stylospectrum-checkbox',\n    tags: ['autodocs'],\n};\nexport const Basic = Template.bind({});\nBasic.args = {};\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html, css, unsafeCSS } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport { styleMap } from 'lit/directives/style-map.js';\nimport styles from './style/index.scss';\nimport { getIconData } from './util';\nlet Icon = class Icon extends LitElement {\n    static { this.styles = css `\n    ${unsafeCSS(styles)}\n  `; }\n    render() {\n        const iconData = getIconData(this.name);\n        if (!iconData) {\n            return html ``;\n        }\n        return html `\n      <i>\n        <svg\n          viewBox=\"0 0 512 512\"\n          width=\"1em\"\n          height=\"1em\"\n          role=\"presentation\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          fill=\"currentColor\"\n          stroke=\"currentColor\"\n          part=\"root\"\n          aria-hidden=\"true\"\n          style=${styleMap({\n            transform: `rotate(${this.rotate}deg)`,\n        })}\n        >\n          <g role=\"presentation\">\n            <path d=\"${iconData.pathData}\" />\n          </g>\n        </svg>\n      </i>\n    `;\n    }\n};\n__decorate([\n    property({ type: String })\n], Icon.prototype, \"name\", void 0);\n__decorate([\n    property({ type: Number })\n], Icon.prototype, \"rotate\", void 0);\nIcon = __decorate([\n    customElement('stylospectrum-icon')\n], Icon);\nexport default Icon;\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html, css, unsafeCSS } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport styles from './style/index.scss';\nimport { Placement } from '../types';\nlet Tooltip = class Tooltip extends LitElement {\n    static { this.styles = css `\n    ${unsafeCSS(styles)}\n  `; }\n    connectedCallback() {\n        super.connectedCallback();\n        setTimeout(() => {\n            const openerRect = JSON.parse(this.openerRect);\n            this.style.left =\n                openerRect.left + (openerRect.width - this.offsetWidth) / 2 + 'px';\n            if (this.placement === Placement.Top) {\n                this.style.top = openerRect.top - this.offsetHeight - 8 + 'px';\n            }\n            else {\n                this.style.top = openerRect.bottom + 8 + 'px';\n            }\n        });\n    }\n    render() {\n        return html `\n      <div class=\"stylospectrum-tooltip\">\n        <div class=\"stylospectrum-tooltip-text\">\n          <slot></slot>\n        </div>\n      </div>\n    `;\n    }\n};\n__decorate([\n    property({ type: String, reflect: false })\n], Tooltip.prototype, \"openerRect\", void 0);\n__decorate([\n    property({ type: String })\n], Tooltip.prototype, \"placement\", void 0);\nTooltip = __decorate([\n    customElement('stylospectrum-tooltip')\n], Tooltip);\nexport default Tooltip;\n"],"names":[],"sourceRoot":""}