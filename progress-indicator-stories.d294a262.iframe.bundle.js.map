{"version":3,"file":"progress-indicator-stories.d294a262.iframe.bundle.js","mappings":";;AAkBA;AACA;AA0BA;;;AAMA;;AAEA;;;;AAIA;;AAKA;AAEA;;;;AAKA;AAEA;AAEA;;AAGA;;ACtEA;;AASA","sources":["webpack://@stylospectrum/ui/./src/progress-indicator/index.ts","webpack://@stylospectrum/ui/./src/progress-indicator/stories.ts"],"sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html, css, unsafeCSS, nothing } from 'lit';\nimport { styleMap } from 'lit/directives/style-map.js';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport styles from './style/index.scss';\nlet ProgressIndicator = class ProgressIndicator extends LitElement {\n    constructor() {\n        super(...arguments);\n        this._previousValue = 0;\n        this._transitionDuration = 0;\n    }\n    static { this.styles = css `\n    ${unsafeCSS(styles)}\n  `; }\n    get validatedValue() {\n        if (this.value < 0) {\n            return 0;\n        }\n        if (this.value > 100) {\n            return 100;\n        }\n        return this.value;\n    }\n    get valueLabel() {\n        return `${this.validatedValue}%`;\n    }\n    get showValueInRemainingBar() {\n        return this.value <= 50;\n    }\n    willUpdate(_changedProperties) {\n        super.willUpdate(_changedProperties);\n        if (_changedProperties.has('value')) {\n            this._transitionDuration =\n                Math.abs(this._previousValue - this.validatedValue) * 20;\n            this._previousValue = this.validatedValue;\n        }\n    }\n    render() {\n        return html ` <div\n      class=${classMap({\n            'stylospectrum-progress-indicator': true,\n            'stylospectrum-progress-indicator-max-value': this.validatedValue === 100,\n        })}\n      role=\"progressbar\"\n      aria-valuemin=\"0\"\n      aria-valuenow=${this.validatedValue}\n      aria-valuemax=\"100\"\n      aria-valuetext=${this.valueLabel}\n    >\n      <div\n        class=\"stylospectrum-progress-indicator-bar\"\n        style=${styleMap({\n            width: `${this.validatedValue}%`,\n            'transition-duration': `${this._transitionDuration}ms`,\n        })}\n      >\n        ${!this.showValueInRemainingBar\n            ? html `<span class=\"stylospectrum-progress-indicator-value\">\n              ${this.valueLabel}\n            </span>`\n            : nothing}\n      </div>\n      <div class=\"stylospectrum-progress-indicator-remaining-bar\">\n        ${this.showValueInRemainingBar\n            ? html `<span class=\"stylospectrum-progress-indicator-value\">\n              ${this.valueLabel}\n            </span>`\n            : nothing}\n      </div>\n    </div>`;\n    }\n};\n__decorate([\n    property({ type: Number })\n], ProgressIndicator.prototype, \"value\", void 0);\n__decorate([\n    state()\n], ProgressIndicator.prototype, \"_previousValue\", void 0);\n__decorate([\n    state()\n], ProgressIndicator.prototype, \"_transitionDuration\", void 0);\nProgressIndicator = __decorate([\n    customElement('stylospectrum-progress-indicator')\n], ProgressIndicator);\nexport default ProgressIndicator;\n","import { ifDefined } from 'lit/directives/if-defined.js';\nimport { html } from 'lit';\nimport '.';\nconst Template = (args) => {\n    return html `\n    <stylospectrum-progress-indicator\n      value=${ifDefined(args.value)}\n    ></stylospectrum-progress-indicator>\n  `;\n};\nexport default {\n    title: 'ProgressIndicator',\n    component: 'stylospectrum-progress-indicator',\n    tags: ['autodocs'],\n};\nexport const Basic = Template.bind({});\nBasic.args = {};\n"],"names":[],"sourceRoot":""}