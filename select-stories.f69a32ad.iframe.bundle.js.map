{"version":3,"file":"select-stories.f69a32ad.iframe.bundle.js","mappings":";;AAsBA;AACA;;;;;;;;;;;;AAkBA;;;AAKA;;;;AAnBA;;ACOA;AACA;;;;;;;AAQA;;ACbA;AACA;AACA;AACA;AACA;AACA;;;;AAKA;ACIA;AACA;AA0CA;;;;;AAKA;AACA;AACA;AACA;;AAEA;;;;;;;;;;AAUA;AACA;AAIA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;;AAKA;;ACxHA;;;AAcA","sources":["webpack://@stylospectrum/ui/./src/icon/index.ts","webpack://@stylospectrum/ui/./src/menu/index.ts","webpack://@stylospectrum/ui/./src/menu/menu-item.ts","webpack://@stylospectrum/ui/./src/select/index.ts","webpack://@stylospectrum/ui/./src/select/stories.ts"],"sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html, css, unsafeCSS } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport { styleMap } from 'lit/directives/style-map.js';\nimport styles from './style/index.scss';\nimport { getIconData } from './util';\nlet Icon = class Icon extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * @type {number}\n         * @defaultValue 0\n         * @public\n         */\n        this.rotate = 0;\n    }\n    static { this.styles = css `\n    ${unsafeCSS(styles)}\n  `; }\n    render() {\n        const iconData = getIconData(this.name);\n        if (!iconData) {\n            return html ``;\n        }\n        return html `\n      <i>\n        <svg\n          viewBox=\"0 0 512 512\"\n          width=\"1em\"\n          height=\"1em\"\n          role=\"presentation\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          fill=\"currentColor\"\n          stroke=\"currentColor\"\n          part=\"root\"\n          aria-hidden=\"true\"\n          style=${styleMap({\n            transform: `rotate(${this.rotate}deg)`,\n        })}\n        >\n          <g role=\"presentation\">\n            <path d=\"${iconData.pathData}\" />\n          </g>\n        </svg>\n      </i>\n    `;\n    }\n};\n__decorate([\n    property({ type: String })\n], Icon.prototype, \"name\", void 0);\n__decorate([\n    property({ type: Number })\n], Icon.prototype, \"rotate\", void 0);\nIcon = __decorate([\n    customElement('stylospectrum-icon')\n], Icon);\nexport default Icon;\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html } from 'lit';\nimport { customElement, query } from 'lit/decorators.js';\nimport { ContextProvider } from '@lit/context';\nimport { menuContext } from './context';\nimport { event } from '../utils';\nimport '../popover';\nlet Menu = class Menu extends LitElement {\n    constructor() {\n        super(...arguments);\n        this._provider = new ContextProvider(this, { context: menuContext });\n    }\n    showAt(opener, width) {\n        this._popoverNode.showAt(opener, width);\n    }\n    hide() {\n        this._popoverNode.hide();\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        this._provider.setValue({\n            hidePopover: () => {\n                this._popoverNode.hide();\n            },\n        });\n    }\n    render() {\n        return html `\n      <stylospectrum-popover\n        @close=${() => this.closeEvent.emit()}\n        @open=${() => this.openEvent.emit()}\n        hide-footer\n        hide-arrow\n        horizontal-align=\"Left\"\n      >\n        <slot></slot>\n      </stylospectrum-popover>\n    `;\n    }\n};\n__decorate([\n    query('stylospectrum-popover')\n], Menu.prototype, \"_popoverNode\", void 0);\n__decorate([\n    event({ name: 'close' })\n], Menu.prototype, \"closeEvent\", void 0);\n__decorate([\n    event({ name: 'open' })\n], Menu.prototype, \"openEvent\", void 0);\nMenu = __decorate([\n    customElement('stylospectrum-menu')\n], Menu);\nexport default Menu;\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport { consume } from '@lit/context';\nimport { menuContext } from './context';\nimport '../list/list-item';\nlet MenuItem = class MenuItem extends LitElement {\n    constructor() {\n        super(...arguments);\n        this.focused = false;\n    }\n    handleMouseEnter() {\n        this.focused = true;\n    }\n    handleMouseLeave() {\n        this.focused = false;\n    }\n    handleClick(e) {\n        e.stopPropagation();\n        this.click();\n        this._consumer?.hidePopover?.();\n    }\n    render() {\n        return html `\n      <stylospectrum-list-item\n        .id=${this.id}\n        ?focused=${this.focused && !this.disableFocused}\n        @mouseenter=${this.handleMouseEnter}\n        @mouseleave=${this.handleMouseLeave}\n        @click=${this.handleClick}\n        icon=${this.icon}\n      >\n        <slot></slot>\n      </stylospectrum-list-item>\n    `;\n    }\n};\n__decorate([\n    consume({ context: menuContext, subscribe: true })\n], MenuItem.prototype, \"_consumer\", void 0);\n__decorate([\n    property({ type: String })\n], MenuItem.prototype, \"icon\", void 0);\n__decorate([\n    property({ type: Boolean, attribute: 'disable-focused' })\n], MenuItem.prototype, \"disableFocused\", void 0);\n__decorate([\n    state()\n], MenuItem.prototype, \"focused\", void 0);\nMenuItem = __decorate([\n    customElement('stylospectrum-menu-item')\n], MenuItem);\nexport default MenuItem;\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html, css, unsafeCSS } from 'lit';\nimport { repeat } from 'lit/directives/repeat.js';\nimport { ContextProvider } from '@lit/context';\nimport { createRef, ref } from 'lit/directives/ref.js';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport { listContext } from '../list/context';\nimport { event } from '../utils';\nimport styles from './style/index.scss';\nimport '../icon';\nimport '../menu';\nimport '../menu/menu-item';\nimport '../icon/data/slim-arrow-down';\nlet Select = class Select extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * @type {Array}\n         * @defaultValue []\n         * @public\n         */\n        this.options = [];\n        /**\n         * @type {boolean}\n         * @defaultValue false\n         * @private\n         */\n        this.focused = false;\n        /**\n         * @type {boolean}\n         * @defaultValue false\n         * @private\n         */\n        this.opened = false;\n        this._innerValue = '';\n        this._provider = new ContextProvider(this, { context: listContext });\n        this._menuRef = createRef();\n    }\n    static { this.styles = css `\n    ${unsafeCSS(styles)}\n  `; }\n    _handleClick() {\n        if (this.options.length === 0) {\n            return;\n        }\n        if (this.opened) {\n            this._menuRef.value?.hide();\n        }\n        else {\n            this._menuRef.value?.showAt(this, this.offsetWidth);\n        }\n    }\n    _handleFocusIn() {\n        if (this.opened) {\n            return;\n        }\n        this.focused = true;\n    }\n    _handleFocusOut() {\n        this.focused = false;\n    }\n    _handleSelect(value) {\n        this._innerValue = value;\n        this.changeEvent.emit(value);\n        this._provider.setValue({\n            selectedId: value,\n        });\n    }\n    willUpdate(_changedProperties) {\n        super.willUpdate(_changedProperties);\n        if (_changedProperties.has('value')) {\n            this._innerValue = this.value || this.defaultValue || '';\n            this._provider.setValue({\n                defaultSelectedId: this._innerValue,\n            });\n        }\n    }\n    get label() {\n        return (this.options.find((option) => option.id === this._innerValue)?.name || '');\n    }\n    render() {\n        return html `\n      <div class=\"stylospectrum-select\" @click=${this._handleClick}>\n        <div\n          class=\"stylospectrum-select-label\"\n          role=\"combobox\"\n          aria-haspopup=\"listbox\"\n          aria-expanded=${this.opened}\n          tabindex=${this.opened ? '-1' : '0'}\n          @focusin=${this._handleFocusIn}\n          @focusout=${this._handleFocusOut}\n        >\n          ${this.label}\n        </div>\n        <stylospectrum-icon\n          name=\"slim-arrow-down\"\n          class=\"stylospectrum-select-icon\"\n        >\n        </stylospectrum-icon>\n      </div>\n\n      <stylospectrum-menu\n        @close=${() => (this.opened = false)}\n        @open=${() => {\n            this.opened = true;\n            this.focused = false;\n        }}\n        @select=${(e) => this._handleSelect(e.detail)}\n        ${ref(this._menuRef)}\n      >\n        ${repeat(this.options, (option) => option.id, (option) => html `\n            <stylospectrum-menu-item\n              ?disable-focused=${true}\n              .id=${option.id}\n              @click=${() => this._handleSelect(option.id)}\n            >\n              <div class=\"stylospectrum-select-option\">${option.name}</div>\n            </stylospectrum-menu-item>\n          `)}\n      </stylospectrum-menu>\n    `;\n    }\n};\n__decorate([\n    property({ type: Array })\n], Select.prototype, \"options\", void 0);\n__decorate([\n    property({ type: String })\n], Select.prototype, \"value\", void 0);\n__decorate([\n    property({ type: String, attribute: 'default-value' })\n], Select.prototype, \"defaultValue\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], Select.prototype, \"focused\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], Select.prototype, \"opened\", void 0);\n__decorate([\n    event({ name: 'change' })\n], Select.prototype, \"changeEvent\", void 0);\n__decorate([\n    state()\n], Select.prototype, \"_innerValue\", void 0);\nSelect = __decorate([\n    customElement('stylospectrum-select')\n], Select);\nexport default Select;\n","import * as uuid from 'uuid';\nimport { html } from 'lit';\nimport '.';\nconst Template = () => {\n    return html `\n    <stylospectrum-select\n      .options=${[\n        { id: uuid.v4(), name: 'Color' },\n        { id: uuid.v4(), name: 'Type' },\n        { id: uuid.v4(), name: 'Size' },\n    ]}\n    >\n    </stylospectrum-select>\n  `;\n};\nexport default {\n    title: 'Select',\n    component: 'stylospectrum-select',\n    tags: ['autodocs'],\n};\nexport const Basic = Template.bind({});\nBasic.args = {};\n"],"names":[],"sourceRoot":""}