{"version":3,"file":"table-stories.4f619779.iframe.bundle.js","mappings":";;AAgCA;AACA;AAMA;AACA;;AAEA;AANA;;AA+BA;AACA;;AAGA;;AAMA;;AAMA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AClEA;AACA;;;;AA6CA;AAGA;AAEA;;;;;AAMA;AACA;AACA;;;AAGA;;AAEA;;AAEA;AACA;;;;;;AAMA;;AAGA;ACnFA;AACA;;;;;;;;;;;;AAkBA;;;AAKA;;;;AAnBA;ACXA;AACA;;AAIA;AAIA;;AAIA;;;;;;AAOA;AACA;;;;AAKA;AACA;;AAGA;;;;AASA;AChCA;AACA;;AAsCA;AAIA;;;;;;;;;AAWA;AACA;;;;;;;;AAQA;AACA;;;AAGA;;;AAGA;;;AAKA;AAEA;AACA;AACA;;AAGA;AAvDA;AACA;AACA;AACA;AACA;AACA;AACA;;AAmDA;ACvFA;AACA;AAgCA;;;;;AAOA;AACA;AACA;AACA;;AAGA;;;;;AAOA;;AAGA;AACA;;;;AAKA;AACA;;;;;AAOA;;;;AAKA;AC2EA;;;;;AAKA;AACA;AAWA;AASA;;;AAKA;AC7LA;AACA;;;;;;AAuBA","sources":["webpack://@stylospectrum/ui/./src/button/index.ts","webpack://@stylospectrum/ui/./src/checkbox/index.ts","webpack://@stylospectrum/ui/./src/icon/index.ts","webpack://@stylospectrum/ui/./src/table/TableRow.ts","webpack://@stylospectrum/ui/./src/table/TableGroupRow.ts","webpack://@stylospectrum/ui/./src/table/index.ts","webpack://@stylospectrum/ui/./src/table/stories.ts","webpack://@stylospectrum/ui/./src/tooltip/index.ts"],"sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html, css, unsafeCSS, nothing, render } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { ButtonDesign, ButtonType } from '../types';\nimport styles from './style/index.scss';\nimport '../icon';\nimport '../tooltip';\nlet Button = class Button extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * @type {ButtonDesign}\n         * @defaultValue \"Primary\"\n         * @public\n         */\n        this.type = ButtonDesign.Primary;\n        /**\n         * Defines whether the button has special form-related functionality.\n         *\n         * @type {ButtonType}\n         * @defaultValue \"Button\"\n         * @public\n         */\n        this.htmlType = ButtonType.Button;\n    }\n    static { this.styles = css `\n    ${unsafeCSS(styles)}\n  `; }\n    tooltipTemplate(hovered = false) {\n        if (!hovered) {\n            return nothing;\n        }\n        return html `<stylospectrum-tooltip\n      openerRect=${JSON.stringify(this.getBoundingClientRect())}\n      placement=${this.tooltipPlacement}\n    >\n      ${this.tooltip}\n    </stylospectrum-tooltip>`;\n    }\n    handleFocusIn() {\n        this.focused = true;\n    }\n    handleFocusOut() {\n        this.focused = false;\n    }\n    handleMouseEnter() {\n        if (!this.tooltip) {\n            return;\n        }\n        render(this.tooltipTemplate(true), document.body);\n    }\n    handleMouseLeave() {\n        if (!this.tooltip) {\n            return;\n        }\n        render(this.tooltipTemplate(), document.body);\n    }\n    render() {\n        const iconNode = this.icon\n            ? html `<stylospectrum-icon\n          class=\"stylospectrum-button-icon\"\n          name=${this.icon}\n          rotate=${this.iconRotate}\n        >\n        </stylospectrum-icon>`\n            : html `<slot name=\"icon\"></slot>`;\n        const textNode = this.icon\n            ? nothing\n            : html `<span class=\"stylospectrum-button-text\">\n          <slot></slot>\n        </span>`;\n        const classes = {\n            'stylospectrum-button': true,\n            'stylospectrum-button-has-icon': !!this.icon,\n        };\n        return html `\n      <button\n        ?disabled=${this.disabled}\n        type=${this.htmlType.toLowerCase()}\n        part=\"button\"\n        class=${classMap(classes)}\n        @focusout=${this.handleFocusOut}\n        @focusin=${this.handleFocusIn}\n        @mouseenter=${this.handleMouseEnter}\n        @mouseleave=${this.handleMouseLeave}\n      >\n        ${textNode} ${iconNode}\n      </button>\n    `;\n    }\n};\n__decorate([\n    property({ type: Boolean, reflect: true })\n], Button.prototype, \"disabled\", void 0);\n__decorate([\n    property()\n], Button.prototype, \"icon\", void 0);\n__decorate([\n    property()\n], Button.prototype, \"iconRotate\", void 0);\n__decorate([\n    property()\n], Button.prototype, \"tooltip\", void 0);\n__decorate([\n    property({ type: String, attribute: 'tooltip-placement' })\n], Button.prototype, \"tooltipPlacement\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], Button.prototype, \"type\", void 0);\n__decorate([\n    property({ type: String, attribute: 'html-type', reflect: true })\n], Button.prototype, \"htmlType\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], Button.prototype, \"focused\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], Button.prototype, \"circle\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true, attribute: 'tab-selected' })\n], Button.prototype, \"tabSelected\", void 0);\nButton = __decorate([\n    customElement('stylospectrum-button')\n], Button);\nexport default Button;\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html, css, unsafeCSS, nothing } from 'lit';\nimport { customElement, property, query, state } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport styles from './style/index.scss';\nimport { event } from '../utils';\nimport { isEnter, isSpace } from '../utils/Keys';\nimport '../icon';\nimport '../tooltip';\nimport '../icon/data/accept';\nlet Checkbox = class Checkbox extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Defines the inner stored value of the component.\n         *\n         * @type {string}\n         * @defaultValue \"\"\n         * @private\n         */\n        this._innerChecked = false;\n        this._controlled = false;\n    }\n    static { this.styles = css `\n    ${unsafeCSS(styles)}\n  `; }\n    get effectiveTabIndex() {\n        const tabindex = this.getAttribute('tabindex');\n        return this.disabled ? undefined : tabindex || '0';\n    }\n    _handleKeyDown(e) {\n        if (isSpace(e)) {\n            e.preventDefault();\n        }\n        if (isEnter(e)) {\n            this.toggle(true);\n        }\n    }\n    _handleKeyUp(e) {\n        if (isSpace(e)) {\n            this.toggle(true);\n        }\n    }\n    toggle(_key = false) {\n        if (_key) {\n            this.inputEle.checked = !this.inputEle.checked;\n        }\n        const checked = this.inputEle.checked;\n        if (this.disabled || this.indeterminate) {\n            return;\n        }\n        if (!this._controlled) {\n            this._innerChecked = checked;\n        }\n        this.changeEvent.emit(checked);\n    }\n    willUpdate(_changedProperties) {\n        super.willUpdate(_changedProperties);\n        if (_changedProperties.has('checked') && !this.indeterminate) {\n            this._controlled = true;\n            this._innerChecked = this.checked;\n        }\n    }\n    render() {\n        const checkNode = this._innerChecked && !this.indeterminate\n            ? html `<stylospectrum-icon\n            class=\"stylospectrum-checkbox-icon\"\n            name=\"accept\"\n          >\n          </stylospectrum-icon>`\n            : nothing;\n        const textNode = this.text\n            ? html `<stylospectrum-label class=\"stylospectrum-checkbox-label\">\n          ${this.text}\n        </stylospectrum-label>`\n            : nothing;\n        return html `\n      <label\n        class=\"stylospectrum-checkbox-wrapper\"\n        role=\"checkbox\"\n        part=\"root\"\n        tabindex=\"${ifDefined(this.effectiveTabIndex)}\"\n        @keydown=\"${this._handleKeyDown}\"\n        @keyup=\"${this._handleKeyUp}\"\n      >\n        <span class=\"stylospectrum-checkbox-inner\">\n          ${checkNode}\n          <input\n            @input=${() => this.toggle()}\n            type=\"checkbox\"\n            ?checked=\"${this._innerChecked}\"\n            ?disabled=\"${this.disabled}\"\n            tabindex=\"-1\"\n            aria-hidden=\"true\"\n          />\n        </span>\n\n        ${textNode}\n      </label>\n    `;\n    }\n};\n__decorate([\n    property({ type: Boolean })\n], Checkbox.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: Boolean })\n], Checkbox.prototype, \"indeterminate\", void 0);\n__decorate([\n    property({ type: Boolean })\n], Checkbox.prototype, \"checked\", void 0);\n__decorate([\n    property()\n], Checkbox.prototype, \"text\", void 0);\n__decorate([\n    state()\n], Checkbox.prototype, \"_innerChecked\", void 0);\n__decorate([\n    state()\n], Checkbox.prototype, \"_controlled\", void 0);\n__decorate([\n    event({ name: 'change' })\n], Checkbox.prototype, \"changeEvent\", void 0);\n__decorate([\n    query('input')\n], Checkbox.prototype, \"inputEle\", void 0);\nCheckbox = __decorate([\n    customElement('stylospectrum-checkbox')\n], Checkbox);\nexport default Checkbox;\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html, css, unsafeCSS } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport { styleMap } from 'lit/directives/style-map.js';\nimport styles from './style/index.scss';\nimport { getIconData } from './util';\nlet Icon = class Icon extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * @type {number}\n         * @defaultValue 0\n         * @public\n         */\n        this.rotate = 0;\n    }\n    static { this.styles = css `\n    ${unsafeCSS(styles)}\n  `; }\n    render() {\n        const iconData = getIconData(this.name);\n        if (!iconData) {\n            return html ``;\n        }\n        return html `\n      <i>\n        <svg\n          viewBox=\"0 0 512 512\"\n          width=\"1em\"\n          height=\"1em\"\n          role=\"presentation\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          fill=\"currentColor\"\n          stroke=\"currentColor\"\n          part=\"root\"\n          aria-hidden=\"true\"\n          style=${styleMap({\n            transform: `rotate(${this.rotate}deg)`,\n        })}\n        >\n          <g role=\"presentation\">\n            <path d=\"${iconData.pathData}\" />\n          </g>\n        </svg>\n      </i>\n    `;\n    }\n};\n__decorate([\n    property({ type: String })\n], Icon.prototype, \"name\", void 0);\n__decorate([\n    property({ type: Number })\n], Icon.prototype, \"rotate\", void 0);\nIcon = __decorate([\n    customElement('stylospectrum-icon')\n], Icon);\nexport default Icon;\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, css, html, unsafeCSS } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport { repeat } from 'lit/directives/repeat.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { styleMap } from 'lit/directives/style-map.js';\nimport styles from './style/table-row.scss';\nimport '../checkbox';\nimport { event } from '../utils';\nlet TableRow = class TableRow extends LitElement {\n    static { this.styles = css `\n    ${unsafeCSS(styles)}\n  `; }\n    render() {\n        return html `\n      <tr\n        class=${classMap({\n            ['stylospectrum-table-row']: true,\n            ['stylospectrum-table-row-selected']: this.selected,\n        })}\n        style=${styleMap({\n            'border-bottom-color': this.lastRow && this.selected ? '#4db1ff' : '#2e3742',\n        })}\n      >\n        ${this.showCheckbox\n            ? html `<td\n              class=\"stylospectrum-table-multi-select-cell\"\n              aria-hidden=\"true\"\n              role=\"presentation\"\n            >\n              <stylospectrum-checkbox\n                ?checked=${this.selected}\n                @change=${() => this.selectedEvent.emit()}\n                class=\"stylospectrum-table-multi-select-checkbox\"\n              >\n              </stylospectrum-checkbox>\n            </td>`\n            : html `<td></td>`}\n        ${repeat(this.columnDefs, (column) => column.field, (column) => {\n            return html `<td>\n              <span>\n                ${column.cellRenderer?.({\n                value: this.record[column.field],\n                data: this.record,\n            }) || this.record[column.field]}\n              </span>\n            </td>`;\n        })}\n      </tr>\n    `;\n    }\n};\n__decorate([\n    property()\n], TableRow.prototype, \"record\", void 0);\n__decorate([\n    property()\n], TableRow.prototype, \"columnDefs\", void 0);\n__decorate([\n    property({ type: Boolean })\n], TableRow.prototype, \"selected\", void 0);\n__decorate([\n    property({ type: Boolean })\n], TableRow.prototype, \"lastRow\", void 0);\n__decorate([\n    property({ type: Boolean })\n], TableRow.prototype, \"showCheckbox\", void 0);\n__decorate([\n    event({ name: 'select', composed: false })\n], TableRow.prototype, \"selectedEvent\", void 0);\nTableRow = __decorate([\n    customElement('stylospectrum-table-row')\n], TableRow);\nexport default TableRow;\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, css, html, nothing, unsafeCSS } from 'lit';\nimport { repeat } from 'lit/directives/repeat.js';\nimport { customElement, property, queryAll, state } from 'lit/decorators.js';\nimport { styleMap } from 'lit/directives/style-map.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { event } from '../utils';\nimport styles from './style/table-group.scss';\nimport '../checkbox';\nimport '../icon/data/slim-arrow-down';\nimport '../icon/data/slim-arrow-right';\nimport './TableRow';\nlet TableGroupRow = class TableGroupRow extends LitElement {\n    constructor() {\n        super(...arguments);\n        this._expanded = true;\n    }\n    static { this.styles = css `\n    ${unsafeCSS(styles)}\n  `; }\n    _handleExpand() {\n        this._expanded = !this._expanded;\n        if (this._expanded) {\n            requestAnimationFrame(() => {\n                this._rows.forEach((row) => {\n                    row.selected = this.selected;\n                });\n            });\n        }\n    }\n    _handleSelect() {\n        this.selected = !this.selected;\n        this._rows.forEach((row) => {\n            row.selected = this.selected;\n        });\n        this.selectedEvent.emit({ record: this.record, selected: this.selected });\n    }\n    updateSelected(selected) {\n        this.selected = selected;\n        this._rows.forEach((row) => {\n            row.selected = selected;\n        });\n    }\n    render() {\n        if (!this.record.children) {\n            return html `<stylospectrum-table-row\n        @select=${this._handleSelect}\n        .record=${this.record}\n        .columnDefs=${this.columnDefs}\n        .selected=${this.selected}\n        .lastRow=${true}\n        .showCheckbox=${true}\n      >\n      </stylospectrum-table-row>`;\n        }\n        return html `\n      <tr\n        class=${classMap({\n            ['stylospectrum-table-group-row']: true,\n            ['stylospectrum-table-group-row-selected']: this.selected,\n        })}\n        style=${styleMap({\n            'border-bottom-color': this.selected && !this._expanded ? '#4db1ff' : '#768ea5',\n        })}\n        part=\"group-row\"\n      >\n        <td\n          class=\"stylospectrum-table-multi-select-cell\"\n          aria-hidden=\"true\"\n          role=\"presentation\"\n        >\n          <stylospectrum-checkbox\n            ?checked=${this.selected}\n            @change=${this._handleSelect}\n            class=\"stylospectrum-table-multi-select-checkbox\"\n          >\n          </stylospectrum-checkbox>\n        </td>\n        <td>\n          <stylospectrum-icon\n            class=\"stylospectrum-table-expand-icon\"\n            name=${this._expanded ? 'slim-arrow-down' : 'slim-arrow-right'}\n            @click=${this._handleExpand}\n          >\n          </stylospectrum-icon>\n          <span>${this.record.name}</span>\n        </td>\n\n        ${repeat(this.columnDefs.slice(1), (column) => column.field, () => {\n            return html `<td></td>`;\n        })}\n      </tr>\n\n      ${this._expanded\n            ? repeat(this.record.children, (child) => child.id, (child, index) => html `<stylospectrum-table-row\n                .record=${child}\n                .columnDefs=${this.columnDefs}\n                ?lastRow=${index === this.record.children.length - 1}\n              >\n              </stylospectrum-table-row>`)\n            : nothing}\n    `;\n    }\n};\n__decorate([\n    property()\n], TableGroupRow.prototype, \"record\", void 0);\n__decorate([\n    property()\n], TableGroupRow.prototype, \"columnDefs\", void 0);\n__decorate([\n    property({ type: Boolean })\n], TableGroupRow.prototype, \"selected\", void 0);\n__decorate([\n    state()\n], TableGroupRow.prototype, \"_expanded\", void 0);\n__decorate([\n    queryAll('stylospectrum-table-row')\n], TableGroupRow.prototype, \"_rows\", void 0);\n__decorate([\n    event({ name: 'select', composed: false })\n], TableGroupRow.prototype, \"selectedEvent\", void 0);\nTableGroupRow = __decorate([\n    customElement('stylospectrum-table-group-row')\n], TableGroupRow);\nexport default TableGroupRow;\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html, css, unsafeCSS, nothing } from 'lit';\nimport { customElement, property, queryAll, state } from 'lit/decorators.js';\nimport { repeat } from 'lit/directives/repeat.js';\nimport styles from './style/index.scss';\nimport { event } from '../utils';\nimport '../checkbox';\nimport './TableGroupRow';\nlet Table = class Table extends LitElement {\n    constructor() {\n        super(...arguments);\n        this._selectedRowGroups = [];\n        this._selected = false;\n    }\n    static { this.styles = css `\n    ${unsafeCSS(styles)}\n  `; }\n    uncheckedAll() {\n        this._selected = false;\n        this._selectedRowGroups = [];\n        this._rowGroups.forEach((row) => {\n            row.updateSelected(false);\n        });\n    }\n    _handleSelect() {\n        this._selected = !this._selected;\n        this._rowGroups.forEach((row) => {\n            row.updateSelected(this._selected);\n        });\n        if (this._selected) {\n            this._selectedRowGroups = this.rowData;\n        }\n        else {\n            this._selectedRowGroups = [];\n        }\n        this.selectedEvent.emit(this._selectedRowGroups);\n    }\n    _handleSelectGroupRow(e) {\n        this._selectedRowGroups = this._selectedRowGroups.filter((row) => row.id !== e.detail.record.id);\n        if (e.detail.selected) {\n            this._selectedRowGroups.push(e.detail.record);\n        }\n        this._selected = this._selectedRowGroups.length === this.rowData.length;\n        this.selectedEvent.emit(this._selectedRowGroups);\n    }\n    _renderTbodyChildren() {\n        if (this.rowData.length === 0) {\n            return html `<tr class=\"stylospectrum-table-no-data-row-wrap\">\n        <td colspan=${this.columnDefs.length} role=\"cell\" style=\"width: 100%\">\n          <div class=\"stylospectrum-table-no-data-row\">\n            <span>No data</span>\n          </div>\n        </td>\n      </tr>`;\n        }\n        return repeat(this.rowData, (record) => record.id, (record) => html `<stylospectrum-table-group-row\n          @select=${this._handleSelectGroupRow}\n          .record=${record}\n          .columnDefs=${this.columnDefs}\n        >\n        </stylospectrum-table-group-row>`);\n    }\n    render() {\n        return html `\n      <div class=\"stylospectrum-table-container\">\n        <table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" role=\"table\">\n          <thead>\n            <tr class=\"stylospectrum-table-header-row\">\n              ${this.rowData.length > 0\n            ? html `<th class=\"stylospectrum-table-select-all-column\">\n                    <stylospectrum-checkbox\n                      ?checked=${this._selected}\n                      @change=${this._handleSelect}\n                      class=\"stylospectrum-table-select-all-checkbox\"\n                    >\n                    </stylospectrum-checkbox>\n                  </th>`\n            : nothing}\n              ${repeat(this.columnDefs, (column) => column.field, (column) => {\n            return html `<th><span>${column.headerName}</span></th>`;\n        })}\n            </tr>\n          </thead>\n\n          <tbody>\n            ${this._renderTbodyChildren()}\n          </tbody>\n        </table>\n      </div>\n    `;\n    }\n};\n__decorate([\n    property()\n], Table.prototype, \"columnDefs\", void 0);\n__decorate([\n    property()\n], Table.prototype, \"rowData\", void 0);\n__decorate([\n    state()\n], Table.prototype, \"_selectedRowGroups\", void 0);\n__decorate([\n    state()\n], Table.prototype, \"_selected\", void 0);\n__decorate([\n    queryAll('stylospectrum-table-group-row')\n], Table.prototype, \"_rowGroups\", void 0);\n__decorate([\n    event({ name: 'select', composed: false })\n], Table.prototype, \"selectedEvent\", void 0);\nTable = __decorate([\n    customElement('stylospectrum-table')\n], Table);\nexport default Table;\n","import * as uuid from 'uuid';\nimport { html } from 'lit';\nimport { createRef, ref } from 'lit/directives/ref.js';\nimport '.';\nimport '../button';\nconst mockData = [\n    {\n        id: uuid.v4(),\n        name: 'Size',\n        options: [\n            {\n                id: uuid.v4(),\n                name: 'XS',\n                synonyms: [\n                    {\n                        id: uuid.v4(),\n                        name: 'Extra Small',\n                    },\n                ],\n            },\n            {\n                id: uuid.v4(),\n                name: 'S',\n                synonyms: [\n                    {\n                        id: uuid.v4(),\n                        name: 'Small',\n                    },\n                ],\n            },\n            {\n                id: uuid.v4(),\n                name: 'M',\n                synonyms: [\n                    {\n                        id: uuid.v4(),\n                        name: 'Medium',\n                    },\n                ],\n            },\n            {\n                id: uuid.v4(),\n                name: 'L',\n                synonyms: [\n                    {\n                        id: uuid.v4(),\n                        name: 'Large',\n                    },\n                ],\n            },\n            {\n                id: uuid.v4(),\n                name: 'XL',\n                synonyms: [\n                    {\n                        id: uuid.v4(),\n                        name: 'Extra Large',\n                    },\n                ],\n            },\n        ],\n    },\n    {\n        id: uuid.v4(),\n        name: 'Color',\n        options: [\n            {\n                id: uuid.v4(),\n                name: 'Red',\n            },\n            {\n                id: uuid.v4(),\n                name: 'Blue',\n            },\n            {\n                id: uuid.v4(),\n                name: 'Green',\n            },\n            {\n                id: uuid.v4(),\n                name: 'Yellow',\n            },\n            {\n                id: uuid.v4(),\n                name: 'Black',\n            },\n        ],\n    },\n    {\n        id: uuid.v4(),\n        name: 'Material',\n        options: [\n            {\n                id: uuid.v4(),\n                name: 'Cotton',\n            },\n            {\n                id: uuid.v4(),\n                name: 'Polyester',\n            },\n            {\n                id: uuid.v4(),\n                name: 'Silk',\n            },\n            {\n                id: uuid.v4(),\n                name: 'Wool',\n            },\n            {\n                id: uuid.v4(),\n                name: 'Leather',\n            },\n        ],\n    },\n    {\n        id: uuid.v4(),\n        name: 'Brand',\n        options: [\n            {\n                id: uuid.v4(),\n                name: 'Nike',\n            },\n            {\n                id: uuid.v4(),\n                name: 'Adidas',\n            },\n            {\n                id: uuid.v4(),\n                name: 'Puma',\n            },\n            {\n                id: uuid.v4(),\n                name: 'Reebok',\n            },\n            {\n                id: uuid.v4(),\n                name: 'Under Armour',\n            },\n        ],\n    },\n    {\n        id: uuid.v4(),\n        name: 'Price',\n        options: [\n            {\n                id: uuid.v4(),\n                name: 'Under $25',\n            },\n            {\n                id: uuid.v4(),\n                name: '$25 to $50',\n            },\n            {\n                id: uuid.v4(),\n                name: '$50 to $100',\n            },\n            {\n                id: uuid.v4(),\n                name: '$100 to $200',\n            },\n            {\n                id: uuid.v4(),\n                name: 'Over $200',\n            },\n        ],\n    },\n];\nconst Template = () => {\n    const tableRef = createRef();\n    return html `\n    <stylospectrum-button @click=${() => tableRef.value?.uncheckedAll()}>\n      un checked all\n    </stylospectrum-button>\n\n    <stylospectrum-table\n      ${ref(tableRef)}\n      .rowData=${mockData.map((data) => {\n        return {\n            id: data.id,\n            name: data.name,\n            children: data.options.map((option) => ({\n                id: option.id,\n                option: option.name,\n                synonyms: option.synonyms || [],\n            })),\n        };\n    })}\n      .columnDefs=${[\n        { headerName: 'Name', field: 'name' },\n        { headerName: 'option', field: 'option' },\n        {\n            headerName: 'synonyms',\n            field: 'synonyms',\n            cellRenderer: ({ value }) => value.map((synonym) => synonym.name).join(', '),\n        },\n    ]}\n      @select=${(e) => {\n        console.log(e.detail);\n    }}\n    >\n    </stylospectrum-table>\n  `;\n};\nexport default {\n    title: 'Table',\n    component: 'stylospectrum-table',\n    tags: ['autodocs'],\n};\nexport const Basic = Template.bind({});\nBasic.args = {};\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html, css, unsafeCSS } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport styles from './style/index.scss';\nimport { Placement } from '../types';\nlet Tooltip = class Tooltip extends LitElement {\n    static { this.styles = css `\n    ${unsafeCSS(styles)}\n  `; }\n    connectedCallback() {\n        super.connectedCallback();\n        setTimeout(() => {\n            const openerRect = JSON.parse(this.openerRect);\n            this.style.left =\n                openerRect.left + (openerRect.width - this.offsetWidth) / 2 + 'px';\n            if (this.placement === Placement.Top) {\n                this.style.top = openerRect.top - this.offsetHeight - 8 + 'px';\n            }\n            else {\n                this.style.top = openerRect.bottom + 8 + 'px';\n            }\n        });\n    }\n    render() {\n        return html `\n      <div class=\"stylospectrum-tooltip\">\n        <div class=\"stylospectrum-tooltip-text\">\n          <slot></slot>\n        </div>\n      </div>\n    `;\n    }\n};\n__decorate([\n    property({ type: String, reflect: false })\n], Tooltip.prototype, \"openerRect\", void 0);\n__decorate([\n    property({ type: String })\n], Tooltip.prototype, \"placement\", void 0);\nTooltip = __decorate([\n    customElement('stylospectrum-tooltip')\n], Tooltip);\nexport default Tooltip;\n"],"names":[],"sourceRoot":""}