{"version":3,"file":"textarea-stories.cdce7c28.iframe.bundle.js","mappings":";;AAYA;AACA;;;;;;;;;;;;;;AAoBA;;;;AAhBA;ACyBA;AACA;;;;;;;AAqDA;;AAGA;AAGA;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAGA;;AClHA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAgBA","sources":["webpack://@stylospectrum/ui/./src/icon/index.ts","webpack://@stylospectrum/ui/./src/textarea/index.ts","webpack://@stylospectrum/ui/./src/textarea/stories.ts"],"sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html, css, unsafeCSS } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport styles from './style/index.scss';\nimport { getIconData } from './util';\nlet Icon = class Icon extends LitElement {\n    static { this.styles = css `\n    ${unsafeCSS(styles)}\n  `; }\n    render() {\n        const iconData = getIconData(this.name);\n        if (!iconData) {\n            return html ``;\n        }\n        return html `\n      <i>\n        <svg\n          viewBox=\"0 0 512 512\"\n          width=\"1em\"\n          height=\"1em\"\n          role=\"presentation\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          fill=\"currentColor\"\n          stroke=\"currentColor\"\n          part=\"root\"\n          aria-hidden=\"true\"\n        >\n          <g role=\"presentation\">\n            <path d=\"${iconData.pathData}\" />\n          </g>\n        </svg>\n      </i>\n    `;\n    }\n};\n__decorate([\n    property({ type: String })\n], Icon.prototype, \"name\", void 0);\nIcon = __decorate([\n    customElement('stylospectrum-icon')\n], Icon);\nexport default Icon;\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html, css, unsafeCSS, nothing, } from 'lit';\nimport { customElement, property, query, state } from 'lit/decorators.js';\nimport { ValueState } from '../types';\nimport { event } from '../utils';\nimport styles from './style/index.scss';\nimport '../icon';\nimport '../icon/data/error';\nlet Textarea = class Textarea extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Defines a short hint intended to aid the user with data entry when the component has no value.\n         *\n         * @type {string}\n         * @defaultValue \"\"\n         * @public\n         */\n        this.placeholder = '';\n        /**\n         * Defines the value state of the component.\n         *\n         * @type {ValueState}\n         * @defaultValue \"None\"\n         * @public\n         */\n        this.valueState = ValueState.None;\n        /**\n         * Defines the inner stored value of the component.\n         *\n         * @type {string}\n         * @defaultValue \"\"\n         * @private\n         */\n        this._innerValue = '';\n    }\n    static { this.styles = css `\n    ${unsafeCSS(styles)}\n  `; }\n    _handleInput(e) {\n        const value = e.target.value;\n        if (!this.value) {\n            this._innerValue = value;\n        }\n        this._mirrorText = this.tokenizeText(value);\n        this.changeEvent.emit(value);\n    }\n    _handleFocus() {\n        this.focused = true;\n    }\n    _handleBlur() {\n        this.focused = false;\n    }\n    getFocusDomRef() {\n        return this.textarea;\n    }\n    tokenizeText(value) {\n        const tokenizedText = value\n            .replace(/&/gm, '&amp;')\n            .replace(/\"/gm, '&quot;')\n            .replace(/'/gm, '&apos;')\n            .replace(/</gm, '&lt;')\n            .replace(/>/gm, '&gt;')\n            .split('\\n');\n        return this.mapTokenizedTextToObject(tokenizedText);\n    }\n    mapTokenizedTextToObject(tokenizedText) {\n        return tokenizedText.map((token, index) => {\n            return {\n                text: token,\n                last: index === tokenizedText.length - 1,\n            };\n        });\n    }\n    willUpdate(_changedProperties) {\n        super.willUpdate(_changedProperties);\n        if (_changedProperties.has('value')) {\n            this._innerValue = this.value || '';\n        }\n    }\n    render() {\n        const valueStateMessageNode = this.valueStateMessage &&\n            this.valueState === ValueState.Error &&\n            this.focused\n            ? html ` <div class=\"stylospectrum-textarea-value-state-message-wrapper\">\n            <stylospectrum-icon\n              class=\"stylospectrum-textarea-value-state-message-icon\"\n              name=\"error\"\n            >\n            </stylospectrum-icon>\n            <span class=\"stylospectrum-textarea-value-state-message\">\n              ${this.valueStateMessage}\n            </span>\n          </div>`\n            : nothing;\n        const growingNode = this.growing\n            ? html `<div class=\"stylospectrum-textarea-mirror\">\n          ${(this._mirrorText || []).map((token) => html `${token.text} <br />`)}\n        </div>`\n            : nothing;\n        return html `\n      <span class=\"stylospectrum-textarea-wrapper\">\n        ${growingNode}\n        <textarea\n          .value=${this._innerValue}\n          @focus=${this._handleFocus}\n          @blur=${this._handleBlur}\n          @input=${this._handleInput}\n          .placeholder=${this.placeholder}\n          class=\"stylospectrum-textarea\"\n          ?disabled=${this.disabled}\n        ></textarea>\n        ${valueStateMessageNode}\n      </span>\n    `;\n    }\n};\n__decorate([\n    property({ type: Boolean })\n], Textarea.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: String })\n], Textarea.prototype, \"placeholder\", void 0);\n__decorate([\n    property({ type: String })\n], Textarea.prototype, \"value\", void 0);\n__decorate([\n    property({ type: String, attribute: 'value-state', reflect: true })\n], Textarea.prototype, \"valueState\", void 0);\n__decorate([\n    property({ type: String, attribute: 'value-state-message' })\n], Textarea.prototype, \"valueStateMessage\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], Textarea.prototype, \"growing\", void 0);\n__decorate([\n    state()\n], Textarea.prototype, \"_innerValue\", void 0);\n__decorate([\n    state()\n], Textarea.prototype, \"_mirrorText\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], Textarea.prototype, \"focused\", void 0);\n__decorate([\n    event({ name: 'change' })\n], Textarea.prototype, \"changeEvent\", void 0);\n__decorate([\n    query('textarea')\n], Textarea.prototype, \"textarea\", void 0);\nTextarea = __decorate([\n    customElement('stylospectrum-textarea')\n], Textarea);\nexport default Textarea;\n","import { html } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport '.';\nconst Template = (args) => {\n    return html `\n    <stylospectrum-textarea\n      @change=\"${(e) => console.log('change:', e.detail)}\"\n      .value=${args.value || ''}\n      .placeholder=${args.placeholder || ''}\n      value-state-message=${ifDefined(args.valueStateMessage)}\n      value-state=${ifDefined(args.valueState)}\n      ?disabled=${args.disabled}\n      ?growing=${args.growing}\n    >\n    </stylospectrum-textarea>\n  `;\n};\nexport default {\n    title: 'Textarea',\n    component: 'stylospectrum-textarea',\n    tags: ['autodocs'],\n    argTypes: {\n        valueState: {\n            control: 'select',\n            options: ['None', 'Error'],\n        },\n    },\n};\nexport const Basic = Template.bind({});\nBasic.args = {};\n"],"names":[],"sourceRoot":""}