{"version":3,"file":"toast-stories.c1d955db.iframe.bundle.js","mappings":";;AAgCA;AACA;AAMA;AACA;;AAEA;AANA;;AAyBA;;AAGA;;AAMA;;AAMA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AC5EA;AACA;;;;;;;;;;;;;;AAoBA;;;;AAhBA;ACaA;AACA;;;AA+DA;AACA;AACA;AACA;;AAEA;AAGA;AC/FA;;;AAGA;AACA;ACCA;AACA;;;;;;AAuBA","sources":["webpack://@stylospectrum/ui/./src/button/index.ts","webpack://@stylospectrum/ui/./src/icon/index.ts","webpack://@stylospectrum/ui/./src/toast/index.ts","webpack://@stylospectrum/ui/./src/toast/stories.ts","webpack://@stylospectrum/ui/./src/tooltip/index.ts"],"sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html, css, unsafeCSS, nothing, render } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { ButtonDesign, ButtonType } from '../types';\nimport styles from './style/index.scss';\nimport '../icon';\nimport '../tooltip';\nlet Button = class Button extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * @type {ButtonDesign}\n         * @defaultValue \"Primary\"\n         * @public\n         */\n        this.type = ButtonDesign.Primary;\n        /**\n         * Defines whether the button has special form-related functionality.\n         *\n         * @type {ButtonType}\n         * @defaultValue \"Button\"\n         * @public\n         */\n        this.htmlType = ButtonType.Button;\n    }\n    static { this.styles = css `\n    ${unsafeCSS(styles)}\n  `; }\n    tooltipTemplate(hovered = false) {\n        if (!this.tooltip || !hovered) {\n            return nothing;\n        }\n        return html `<stylospectrum-tooltip\n      openerRect=${JSON.stringify(this.getBoundingClientRect())}\n      placement=${this.tooltipPlacement}\n    >\n      ${this.tooltip}\n    </stylospectrum-tooltip>`;\n    }\n    handleFocusIn() {\n        this.focused = true;\n    }\n    handleFocusOut() {\n        this.focused = false;\n    }\n    handleMouseEnter() {\n        render(this.tooltipTemplate(true), document.body);\n    }\n    handleMouseLeave() {\n        render(this.tooltipTemplate(), document.body);\n    }\n    render() {\n        const iconNode = this.icon\n            ? html `<stylospectrum-icon\n          class=\"stylospectrum-button-icon\"\n          name=${this.icon}\n        >\n        </stylospectrum-icon>`\n            : html `<slot name=\"icon\"></slot>`;\n        const textNode = this.icon\n            ? nothing\n            : html `<span class=\"stylospectrum-button-text\">\n          <slot></slot>\n        </span>`;\n        const classes = {\n            'stylospectrum-button': true,\n            'stylospectrum-button-has-icon': !!this.icon,\n        };\n        return html `\n      <button\n        ?disabled=${this.disabled}\n        type=${this.htmlType.toLowerCase()}\n        part=\"button\"\n        class=${classMap(classes)}\n        @focusout=${this.handleFocusOut}\n        @focusin=${this.handleFocusIn}\n        @mouseenter=${this.handleMouseEnter}\n        @mouseleave=${this.handleMouseLeave}\n      >\n        ${textNode} ${iconNode}\n      </button>\n    `;\n    }\n};\n__decorate([\n    property({ type: Boolean, reflect: true })\n], Button.prototype, \"disabled\", void 0);\n__decorate([\n    property()\n], Button.prototype, \"icon\", void 0);\n__decorate([\n    property()\n], Button.prototype, \"tooltip\", void 0);\n__decorate([\n    property({ type: String, attribute: 'tooltip-placement' })\n], Button.prototype, \"tooltipPlacement\", void 0);\n__decorate([\n    property({ type: String, reflect: true })\n], Button.prototype, \"type\", void 0);\n__decorate([\n    property({ type: String, attribute: 'html-type', reflect: true })\n], Button.prototype, \"htmlType\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], Button.prototype, \"focused\", void 0);\n__decorate([\n    property({ type: Boolean })\n], Button.prototype, \"circle\", void 0);\nButton = __decorate([\n    customElement('stylospectrum-button')\n], Button);\nexport default Button;\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html, css, unsafeCSS } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport styles from './style/index.scss';\nimport { getIconData } from './util';\nlet Icon = class Icon extends LitElement {\n    static { this.styles = css `\n    ${unsafeCSS(styles)}\n  `; }\n    render() {\n        const iconData = getIconData(this.name);\n        if (!iconData) {\n            return html ``;\n        }\n        return html `\n      <i>\n        <svg\n          viewBox=\"0 0 512 512\"\n          width=\"1em\"\n          height=\"1em\"\n          role=\"presentation\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          fill=\"currentColor\"\n          stroke=\"currentColor\"\n          part=\"root\"\n          aria-hidden=\"true\"\n        >\n          <g role=\"presentation\">\n            <path d=\"${iconData.pathData}\" />\n          </g>\n        </svg>\n      </i>\n    `;\n    }\n};\n__decorate([\n    property({ type: String })\n], Icon.prototype, \"name\", void 0);\nIcon = __decorate([\n    customElement('stylospectrum-icon')\n], Icon);\nexport default Icon;\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html, css, unsafeCSS, nothing } from 'lit';\nimport { styleMap } from 'lit/directives/style-map.js';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport styles from './style/index.scss';\nlet Toast = class Toast extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * @type {boolean}\n         * @private\n         */\n        this._reopen = false;\n        /**\n         * @type {number}\n         * @private\n         */\n        this._opacity = 1;\n        /**\n         * @type {string}\n         * @private\n         */\n        this.text = '';\n    }\n    static { this.styles = css `\n    ${unsafeCSS(styles)}\n  `; }\n    /**\n     * Shows the component.\n     * @public\n     */\n    show(text) {\n        this.text = text;\n        if (this._open) {\n            this._open = false;\n            this._reopen = true;\n        }\n        else {\n            this._initiateOpening();\n        }\n    }\n    _initiateOpening() {\n        this._domRendered = true;\n        requestAnimationFrame(() => {\n            this._open = true;\n        });\n    }\n    _handleTransitionEnd() {\n        if (this._hover) {\n            return;\n        }\n        this._domRendered = false;\n        this._open = false;\n        this._opacity = 1;\n    }\n    _handleMouseOver() {\n        this._hover = true;\n    }\n    _handleMouseLeave() {\n        this._hover = false;\n    }\n    willUpdate(_changedProperties) {\n        super.willUpdate(_changedProperties);\n        if (this._reopen) {\n            this._reopen = false;\n            this._initiateOpening();\n        }\n    }\n    get styles() {\n        const MAX_DURATION = 1000;\n        const duration = 3000;\n        const transitionDuration = Math.min(duration / 3, MAX_DURATION);\n        setTimeout(() => {\n            this._opacity = this._open && !this._hover ? 0 : undefined;\n        }, 0);\n        return {\n            transitionDuration: this._open ? `${transitionDuration}ms` : undefined,\n            transitionDelay: this._open\n                ? `${duration - transitionDuration}ms`\n                : undefined,\n            opacity: this._opacity,\n            zIndex: 1000,\n        };\n    }\n    render() {\n        if (this._domRendered) {\n            return html `<div\n        class=\"stylospectrum-toast\"\n        role=\"alert\"\n        style=${styleMap(this.styles)}\n        @transitionend=\"${this._handleTransitionEnd}\"\n        @mouseover=\"${this._handleMouseOver}\"\n        @mouseleave=\"${this._handleMouseLeave}\"\n      >\n        ${this.text}\n      </div>`;\n        }\n        return nothing;\n    }\n};\n__decorate([\n    property({ type: Boolean, reflect: true, attribute: 'open' })\n], Toast.prototype, \"_open\", void 0);\n__decorate([\n    state()\n], Toast.prototype, \"_domRendered\", void 0);\n__decorate([\n    state()\n], Toast.prototype, \"_hover\", void 0);\n__decorate([\n    state()\n], Toast.prototype, \"_reopen\", void 0);\n__decorate([\n    state()\n], Toast.prototype, \"_opacity\", void 0);\n__decorate([\n    state()\n], Toast.prototype, \"text\", void 0);\nToast = __decorate([\n    customElement('stylospectrum-toast')\n], Toast);\nexport default Toast;\n","import { html } from 'lit';\nimport { ref, createRef } from 'lit/directives/ref.js';\nimport '.';\nimport '../button';\nconst Template = () => {\n    const toastRef = createRef();\n    return html `\n    <stylospectrum-button @click=\"${() => toastRef.value?.show('Basic Toast')}\">\n      Show Toast\n    </stylospectrum-button>\n    <stylospectrum-toast ${ref(toastRef)}> </stylospectrum-toast>\n  `;\n};\nexport default {\n    title: 'Toast',\n    component: 'stylospectrum-toast',\n    tags: ['autodocs'],\n};\nexport const Basic = Template.bind({});\nBasic.args = {};\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html, css, unsafeCSS } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport styles from './style/index.scss';\nimport { Placement } from '../types';\nlet Tooltip = class Tooltip extends LitElement {\n    static { this.styles = css `\n    ${unsafeCSS(styles)}\n  `; }\n    connectedCallback() {\n        super.connectedCallback();\n        setTimeout(() => {\n            const openerRect = JSON.parse(this.openerRect);\n            this.style.left =\n                openerRect.left + (openerRect.width - this.offsetWidth) / 2 + 'px';\n            if (this.placement === Placement.Top) {\n                this.style.top = openerRect.top - this.offsetHeight - 8 + 'px';\n            }\n            else {\n                this.style.top = openerRect.bottom + 8 + 'px';\n            }\n        });\n    }\n    render() {\n        return html `\n      <div class=\"stylospectrum-tooltip\">\n        <div class=\"stylospectrum-tooltip-text\">\n          <slot></slot>\n        </div>\n      </div>\n    `;\n    }\n};\n__decorate([\n    property({ type: String, reflect: false })\n], Tooltip.prototype, \"openerRect\", void 0);\n__decorate([\n    property({ type: String })\n], Tooltip.prototype, \"placement\", void 0);\nTooltip = __decorate([\n    customElement('stylospectrum-tooltip')\n], Tooltip);\nexport default Tooltip;\n"],"names":[],"sourceRoot":""}